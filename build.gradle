// Optionally load a local property file, e.g. file containing secrets of user for private repositories.


allprojects {
    def localProperties = new Properties()
    if (rootProject.file("local.properties").exists()) {
        localProperties.load(new FileInputStream(rootProject.file("local.properties")))
    }
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }
        maven {
            url = uri("https://maven.pkg.github.com/DynamicElement/dynamicelement-mddi-sdk-android")
            credentials {
                username = localProperties.getProperty("gpr.user")
                password = localProperties.getProperty("gpr.key.read")
            }
        }

        maven { url "https://jitpack.io" }
    }
}

buildscript {
    def localProperties = new Properties()
    if (rootProject.file("local.properties").exists()) {
        localProperties.load(new FileInputStream(rootProject.file("local.properties")))
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }
        maven {
            url = uri("https://maven.pkg.github.com/DynamicElement/dynamicelement-mddi-sdk-android")
            credentials {
                username = localProperties.getProperty("gpr.user")
                password = localProperties.getProperty("gpr.key.read")
            }
        }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath 'com.github.kezong:fat-aar:1.3.8'
        //noinspection GradleDependency
        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5")
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

