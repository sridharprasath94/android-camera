// Optionally load a local property file, e.g. file containing secrets of user for private repositories.
def localProperties = new Properties()
if (rootProject.file("local.properties").exists()) {
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
}

apply plugin: 'com.google.protobuf'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.kezong.fat-aar'

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        multiDexEnabled true
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    viewBinding {
        enabled = true

    }
    lintOptions {
        abortOnError false
    }
    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        debug {
            debuggable = true
        }
        release {
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        pickFirst '**/*.so'
        pickFirst '**/*.proto'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    //noinspection GradleDependency,GradleCompatible
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    //noinspection GradleCompatible
    implementation 'com.android.support:design:28.0.3'

    api project(path: ':logic')

    testImplementation 'androidx.test:runner:1.5.2'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation 'org.mockito:mockito-inline:5.1.1'
}


def getArtifactId = { ->
    return "ui" // Replace with appropriate name
}

// Publishing android library in a GitHub repository (maven repository)
// https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DynamicElement/dynamicelement-mddi-sdk-android")
            credentials {
                username = localProperties.getProperty("gpr.user", "technical-user")
                password = localProperties.getProperty("gpr.key.publish", System.getenv("PUBLISH_GITHUB_TOKEN"))
            }
        }
    }
    publications {
        bar(MavenPublication) {
            groupId 'com.dynamicelement.sdk.android' // Replace with group ID
            artifactId getArtifactId()
            version System.getenv("VERSION_STRING")
            artifact("$buildDir/outputs/aar/ui-release.aar")
        }
    }
}
