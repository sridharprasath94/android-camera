plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.maven.publish)
}
// Optionally load a local property file, e.g. file containing secrets of user for private repositories.
def localProperties = new Properties()
File localPropertiesFile = new File(rootDir, "local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}


android {
    namespace 'com.dynamicelement.mddi.sdk.logic'
    compileSdk 35
    defaultConfig {
        minSdk 26
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86_64"
        }
        ndkVersion '21.1.6352462'
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters 'arm64-v8a', 'armeabi-v7a'
                arguments "-DOpenCV_DIR=" + getProjectDir().toString() + "/src/main/native"
                arguments "-DCMAKE_BUILD_TYPE=Release"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version localProperties.getProperty("cmake.version", "3.25.1")
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
        dataBinding true
    }
    viewBinding {
        enabled = true
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        pickFirst '**/*.so'
        pickFirst '**/*.proto'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {
    implementation libs.dynamicelement.client.java
    implementation libs.okhttp
    api libs.barcode.scanning
}


def getArtifactId = { ->
    return "logic" // Replace with appropriate name
}

// Publishing android library in a GitHub repository (maven repository)
// https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DynamicElement/dynamicelement-mddi-sdk-android")
            credentials {
                username = localProperties.getProperty("gpr.user", "technical-user")
                password = localProperties.getProperty("gpr.key.publish", System.getenv("PUBLISH_GITHUB_TOKEN"))
            }
        }
    }
    publications {
        bar(MavenPublication) {
            groupId 'com.dynamicelement.mddi.sdk.android' // Replace with group ID
            artifactId getArtifactId()
            version System.getenv("VERSION_STRING")
            artifact("$buildDir/outputs/aar/logic-release.aar")
        }
    }
}
