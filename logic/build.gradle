import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

// Optionally load a local property file, e.g. file containing secrets of user for private repositories.
def localProperties = new Properties()
if (rootProject.file("local.properties").exists()) {
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
}


apply plugin: 'com.google.protobuf'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 26
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters 'arm64-v8a', 'armeabi-v7a'
                arguments "-DOpenCV_DIR=" + getProjectDir().toString() + "/src/main/native"
            }
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version localProperties.getProperty("cmake.version", "3.25.1")
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        viewBinding true
    }
    viewBinding {
        enabled = true
    }
    buildTypes {
        debug {
            //testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        pickFirst '**/*.so'
        pickFirst '**/*.proto'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.android.support:multidex:1.0.3'

    api 'com.google.mlkit:barcode-scanning:17.0.3'
    api 'io.grpc:grpc-android:1.53.0'
    api 'io.grpc:grpc-okhttp:1.53.0'
    api 'io.grpc:grpc-protobuf-lite:1.53.0'
    api 'io.grpc:grpc-stub:1.53.0'

    testImplementation 'androidx.test:runner:1.5.2'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation 'org.mockito:mockito-inline:5.1.1'
}


// Setting an architecture classifier when in Mac OSX for the protobuf dependencies.
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
String archClassifier = os.macOsX ? ":osx-x86_64" : ""

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.12.4' + archClassifier }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.38.0' + archClassifier
            // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc { // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

def getArtifactId = { ->
    return "logic" // Replace with appropriate name
}

// Publishing android library in a GitHub repository (maven repository)
// https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DynamicElement/dynamicelement-mddi-sdk-android")
            credentials {
                username = localProperties.getProperty("gpr.user", "technical-user")
                password = localProperties.getProperty("gpr.key.publish", System.getenv("PUBLISH_GITHUB_TOKEN"))
            }
        }
    }
    publications {
        bar(MavenPublication) {
            groupId 'com.dynamicelement.mddi.sdk.android' // Replace with group ID
            artifactId getArtifactId()
            version System.getenv("VERSION_STRING")
            artifact("$buildDir/outputs/aar/logic-release.aar")
        }
    }
}
